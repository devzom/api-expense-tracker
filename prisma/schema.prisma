datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SortOrder {
  asc
  desc
}

// User

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String
  surname         String?
  avatar          String?
  defaultCurrency Currency         @default(USD) @map("default_currency")
  expenses        Expense[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  savedReports    SavedReport[]
  preferences     UserPreferences?

  @@map("users")
}

// Preferences

enum WeekDay {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

model UserPreferences {
  id                   String   @id @default(uuid())
  userId               String   @unique @map("user_id")
  user                 User     @relation(fields: [userId], references: [id])
  notificationsEnabled Boolean  @default(true)
  weekStartsOn         WeekDay  @default(monday)
  language             String   @default("en")
  currency             Currency @default(USD) @map("default_currency")
  dateFormat           String   @default("MM/DD/YYYY")
  timeFormat           String   @default("24h")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}

// Expenses

enum ExpenseType {
  expense
  income
}

enum Currency {
  USD
  EUR
  GBP
  PLN
}

model Expense {
  id              String         @id @default(uuid())
  date            DateTime       @default(now())
  amount          Float
  currency        Currency       @default(USD)
  type            ExpenseType    @default(expense)
  description     String?
  category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?        @map("category_id")
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?        @map("payment_method_id")
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("user_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@index([userId])
  @@map("expenses")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  color       String?
  icon        String?
  expenses    Expense[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model PaymentMethod {
  id        String    @id @default(uuid())
  name      String    @unique
  icon      String?
  isActive  Boolean   @default(true) @map("is_active")
  expenses  Expense[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("payment_methods")
}

// Reports

enum ReportType {
  WEEKLY_SUMMARY
  MONTHLY_SUMMARY
  CATEGORY_BREAKDOWN
}

enum Schedule {
  DAILY
  WEEKLY
  MONTHLY
}

model SavedReport {
  id        String     @id @default(uuid())
  name      String
  type      ReportType
  filters   Json? // Stored report filters
  schedule  Schedule? // For automated report generation
  userId    String     @map("user_id")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("saved_reports")
}
